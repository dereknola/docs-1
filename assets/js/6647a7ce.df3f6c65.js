"use strict";(self.webpackChunkk_3_s_docs=self.webpackChunkk_3_s_docs||[]).push([[3353],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,k=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(3117),r=n(7294),i=n(6010),o=n(2466),s=n(6775),l=n(1980),u=n(7392),p=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=c(e),[o,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[l,u]=k({queryString:n,groupId:a}),[d,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),g=(()=>{const e=l??d;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),h(e)}),[u,h,i]),tabValues:i}}var g=n(2389);const f="tabList__CuJ",b="tabItem_LNqP";function y(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),c=e=>{const t=e.currentTarget,n=p.indexOf(t),a=u[n].value;a!==s&&(d(t),l(a))},m=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:c},o,{className:(0,i.Z)("tabs__item",b,o?.className,{"tabs__item--active":s===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=h(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",f)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function w(e){const t=(0,g.Z)();return r.createElement(N,(0,a.Z)({key:String(t)},e))}},3115:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var a=n(3117),r=(n(7294),n(3905)),i=n(4866),o=n(5162);const s={title:"Advanced Options / Configuration",weight:45,aliases:["/k3s/latest/en/running/","/k3s/latest/en/configuration/"]},l=void 0,u={unversionedId:"advanced/advanced",id:"advanced/advanced",title:"Advanced Options / Configuration",description:"This section contains advanced information describing the different ways you can run and manage K3s, as well as steps necessary to prepare the host OS for K3s use.",source:"@site/docs/advanced/advanced.md",sourceDirName:"advanced",slug:"/advanced/",permalink:"/docs-k3s/advanced/",draft:!1,editUrl:"https://github.com/k3s-io/docs/edit/main/docs/advanced/advanced.md",tags:[],version:"current",lastUpdatedAt:1682707376,formattedLastUpdatedAt:"Apr 28, 2023",frontMatter:{title:"Advanced Options / Configuration",weight:45,aliases:["/k3s/latest/en/running/","/k3s/latest/en/configuration/"]},sidebar:"mySidebar",previous:{title:"Helm",permalink:"/docs-k3s/helm/"},next:{title:"FAQ",permalink:"/docs-k3s/faq/"}},p={},d=[{value:"Certificate Management",id:"certificate-management",level:2},{value:"Certificate Authority Certificates",id:"certificate-authority-certificates",level:3},{value:"Client and Server certificates",id:"client-and-server-certificates",level:3},{value:"Token Management",id:"token-management",level:2},{value:"Configuring an HTTP proxy",id:"configuring-an-http-proxy",level:2},{value:"Using Docker as the Container Runtime",id:"using-docker-as-the-container-runtime",level:2},{value:"Using etcdctl",id:"using-etcdctl",level:2},{value:"Configuring containerd",id:"configuring-containerd",level:2},{value:"NVIDIA Container Runtime Support",id:"nvidia-container-runtime-support",level:2},{value:"Running Agentless Servers (Experimental)",id:"running-agentless-servers-experimental",level:2},{value:"Running Rootless Servers (Experimental)",id:"running-rootless-servers-experimental",level:2},{value:"Known Issues with Rootless mode",id:"known-issues-with-rootless-mode",level:3},{value:"Starting Rootless Servers",id:"starting-rootless-servers",level:3},{value:"Advanced Rootless Configuration",id:"advanced-rootless-configuration",level:3},{value:"Troubleshooting Rootless",id:"troubleshooting-rootless",level:3},{value:"Node Labels and Taints",id:"node-labels-and-taints",level:2},{value:"Starting the Service with the Installation Script",id:"starting-the-service-with-the-installation-script",level:2},{value:"Additional OS Preparations",id:"additional-os-preparations",level:2},{value:"Old iptables versions",id:"old-iptables-versions",level:3},{value:"Red Hat Enterprise Linux / CentOS",id:"red-hat-enterprise-linux--centos",level:3},{value:"Ubuntu",id:"ubuntu",level:3},{value:"Raspberry Pi",id:"raspberry-pi",level:3},{value:"Running K3s in Docker",id:"running-k3s-in-docker",level:2},{value:"SELinux Support",id:"selinux-support",level:2},{value:"Enabling SELinux Enforcement",id:"enabling-selinux-enforcement",level:3},{value:"Enabling Lazy Pulling of eStargz (Experimental)",id:"enabling-lazy-pulling-of-estargz-experimental",level:2},{value:"What&#39;s lazy pulling and eStargz?",id:"whats-lazy-pulling-and-estargz",level:3},{value:"Configure k3s for lazy pulling of eStargz",id:"configure-k3s-for-lazy-pulling-of-estargz",level:3},{value:"Additional Logging Sources",id:"additional-logging-sources",level:2},{value:"Additional Network Policy Logging",id:"additional-network-policy-logging",level:2}],c={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This section contains advanced information describing the different ways you can run and manage K3s, as well as steps necessary to prepare the host OS for K3s use."),(0,r.kt)("h2",{id:"certificate-management"},"Certificate Management"),(0,r.kt)("h3",{id:"certificate-authority-certificates"},"Certificate Authority Certificates"),(0,r.kt)("p",null,"K3s generates self-signed Certificate Authority (CA) Certificates during startup of the first server node. These CA certificates are valid for 10 years, and are not automatically renewed."),(0,r.kt)("p",null,"For information on using custom CA certificates, or renewing the self-signed CA certificates, see the ",(0,r.kt)("a",{parentName:"p",href:"/docs-k3s/cli/certificate#certificate-authority-ca-certificates"},(0,r.kt)("inlineCode",{parentName:"a"},"k3s certificate rotate-ca")," command documentation"),"."),(0,r.kt)("h3",{id:"client-and-server-certificates"},"Client and Server certificates"),(0,r.kt)("p",null,"K3s client and server certificates are valid for 365 days from their date of issuance. Any certificates that are expired, or within 90 days of expiring, are automatically renewed every time K3s starts."),(0,r.kt)("p",null,"For information on manually rotating client and server certificates, see the ",(0,r.kt)("a",{parentName:"p",href:"/docs-k3s/cli/certificate#client-and-server-certificates"},(0,r.kt)("inlineCode",{parentName:"a"},"k3s certificate rotate")," command documentation"),"."),(0,r.kt)("h2",{id:"token-management"},"Token Management"),(0,r.kt)("p",null,"By default, K3s uses a single static token for both servers and agents. This token cannot be changed once the cluster has been created.\nIt is possible to enable a second static token that can only be used to join agents, or to create temporary ",(0,r.kt)("inlineCode",{parentName:"p"},"kubeadm")," style join tokens that expire automatically.\nFor more information, see the ",(0,r.kt)("a",{parentName:"p",href:"/docs-k3s/cli/token"},(0,r.kt)("inlineCode",{parentName:"a"},"k3s token")," command documentation"),"."),(0,r.kt)("h2",{id:"configuring-an-http-proxy"},"Configuring an HTTP proxy"),(0,r.kt)("p",null,"If you are running K3s in an environment, which only has external connectivity through an HTTP proxy, you can configure your proxy settings on the K3s systemd service. These proxy settings will then be used in K3s and passed down to the embedded containerd and kubelet."),(0,r.kt)("p",null,"The K3s installation script will automatically take the ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP_PROXY"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTPS_PROXY")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"NO_PROXY"),", as well as the ",(0,r.kt)("inlineCode",{parentName:"p"},"CONTAINERD_HTTP_PROXY"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CONTAINERD_HTTPS_PROXY")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"CONTAINERD_NO_PROXY")," variables from the current shell, if they are present, and write them to the environment file of your systemd service, usually:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/etc/systemd/system/k3s.service.env")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/etc/systemd/system/k3s-agent.service.env"))),(0,r.kt)("p",null,"Of course, you can also configure the proxy by editing these files."),(0,r.kt)("p",null,"K3s will automatically add the cluster internal Pod and Service IP ranges and cluster DNS domain to the list of ",(0,r.kt)("inlineCode",{parentName:"p"},"NO_PROXY")," entries. You should ensure that the IP address ranges used by the Kubernetes nodes themselves (i.e. the public and private IPs of the nodes) are included in the ",(0,r.kt)("inlineCode",{parentName:"p"},"NO_PROXY")," list, or that the nodes can be reached through the proxy."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"HTTP_PROXY=http://your-proxy.example.com:8888\nHTTPS_PROXY=http://your-proxy.example.com:8888\nNO_PROXY=127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16\n")),(0,r.kt)("p",null,"If you want to configure the proxy settings for containerd without affecting K3s and the Kubelet, you can prefix the variables with ",(0,r.kt)("inlineCode",{parentName:"p"},"CONTAINERD_"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CONTAINERD_HTTP_PROXY=http://your-proxy.example.com:8888\nCONTAINERD_HTTPS_PROXY=http://your-proxy.example.com:8888\nCONTAINERD_NO_PROXY=127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16\n")),(0,r.kt)("h2",{id:"using-docker-as-the-container-runtime"},"Using Docker as the Container Runtime"),(0,r.kt)("p",null,"K3s includes and defaults to ",(0,r.kt)("a",{parentName:"p",href:"https://containerd.io/"},"containerd"),", an industry-standard container runtime.\nAs of Kubernetes 1.24, the Kubelet no longer includes dockershim, the component that allows the kubelet to communicate with dockerd.\nK3s 1.24 and higher include ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Mirantis/cri-dockerd"},"cri-dockerd"),", which allows seamless upgrade from prior releases of K3s while continuing to use the Docker container runtime."),(0,r.kt)("p",null,"To use Docker instead of containerd:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install Docker on the K3s node. One of Rancher's ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rancher/install-docker"},"Docker installation scripts")," can be used to install Docker:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://releases.rancher.com/install-docker/20.10.sh | sh\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install K3s using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--docker")," option:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sfL https://get.k3s.io | sh -s - --docker\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Confirm that the cluster is available:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo k3s kubectl get pods --all-namespaces\nNAMESPACE     NAME                                     READY   STATUS      RESTARTS   AGE\nkube-system   local-path-provisioner-6d59f47c7-lncxn   1/1     Running     0          51s\nkube-system   metrics-server-7566d596c8-9tnck          1/1     Running     0          51s\nkube-system   helm-install-traefik-mbkn9               0/1     Completed   1          51s\nkube-system   coredns-8655855d6-rtbnb                  1/1     Running     0          51s\nkube-system   svclb-traefik-jbmvl                      2/2     Running     0          43s\nkube-system   traefik-758cd5fc85-2wz97                 1/1     Running     0          43s\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Confirm that the Docker containers are running:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ sudo docker ps\nCONTAINER ID        IMAGE                     COMMAND                  CREATED              STATUS              PORTS               NAMES\n3e4d34729602        897ce3c5fc8f              "entry"                  About a minute ago   Up About a minute                       k8s_lb-port-443_svclb-traefik-jbmvl_kube-system_d46f10c6-073f-4c7e-8d7a-8e7ac18f9cb0_0\nbffdc9d7a65f        rancher/klipper-lb        "entry"                  About a minute ago   Up About a minute                       k8s_lb-port-80_svclb-traefik-jbmvl_kube-system_d46f10c6-073f-4c7e-8d7a-8e7ac18f9cb0_0\n436b85c5e38d        rancher/library-traefik   "/traefik --configfi\u2026"   About a minute ago   Up About a minute                       k8s_traefik_traefik-758cd5fc85-2wz97_kube-system_07abe831-ffd6-4206-bfa1-7c9ca4fb39e7_0\nde8fded06188        rancher/pause:3.1         "/pause"                 About a minute ago   Up About a minute                       k8s_POD_svclb-traefik-jbmvl_kube-system_d46f10c6-073f-4c7e-8d7a-8e7ac18f9cb0_0\n7c6a30aeeb2f        rancher/pause:3.1         "/pause"                 About a minute ago   Up About a minute                       k8s_POD_traefik-758cd5fc85-2wz97_kube-system_07abe831-ffd6-4206-bfa1-7c9ca4fb39e7_0\nae6c58cab4a7        9d12f9848b99              "local-path-provisio\u2026"   About a minute ago   Up About a minute                       k8s_local-path-provisioner_local-path-provisioner-6d59f47c7-lncxn_kube-system_2dbd22bf-6ad9-4bea-a73d-620c90a6c1c1_0\nbe1450e1a11e        9dd718864ce6              "/metrics-server"        About a minute ago   Up About a minute                       k8s_metrics-server_metrics-server-7566d596c8-9tnck_kube-system_031e74b5-e9ef-47ef-a88d-fbf3f726cbc6_0\n4454d14e4d3f        c4d3d16fe508              "/coredns -conf /etc\u2026"   About a minute ago   Up About a minute                       k8s_coredns_coredns-8655855d6-rtbnb_kube-system_d05725df-4fb1-410a-8e82-2b1c8278a6a1_0\nc3675b87f96c        rancher/pause:3.1         "/pause"                 About a minute ago   Up About a minute                       k8s_POD_coredns-8655855d6-rtbnb_kube-system_d05725df-4fb1-410a-8e82-2b1c8278a6a1_0\n4b1fddbe6ca6        rancher/pause:3.1         "/pause"                 About a minute ago   Up About a minute                       k8s_POD_local-path-provisioner-6d59f47c7-lncxn_kube-system_2dbd22bf-6ad9-4bea-a73d-620c90a6c1c1_0\n64d3517d4a95        rancher/pause:3.1         "/pause"\n')))),(0,r.kt)("h2",{id:"using-etcdctl"},"Using etcdctl"),(0,r.kt)("p",null,"etcdctl provides a CLI for interacting with etcd servers. K3s does not bundle etcdctl."),(0,r.kt)("p",null,"If you would like to use etcdctl to interact with K3s's embedded etcd, install etcdctl using the ",(0,r.kt)("a",{parentName:"p",href:"https://etcd.io/docs/latest/install/"},"official documentation"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ETCD_VERSION="v3.5.5"\nETCD_URL="https://github.com/etcd-io/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz"\ncurl -sL ${ETCD_URL} | sudo tar -zxv --strip-components=1 -C /usr/local/bin\n')),(0,r.kt)("p",null,"You may then use etcdctl by configuring it to use the K3s-managed certificates and keys for authentication:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo etcdctl version \\\n  --cacert=/var/lib/rancher/k3s/server/tls/etcd/server-ca.crt \\\n  --cert=/var/lib/rancher/k3s/server/tls/etcd/client.crt \\\n  --key=/var/lib/rancher/k3s/server/tls/etcd/client.key\n")),(0,r.kt)("h2",{id:"configuring-containerd"},"Configuring containerd"),(0,r.kt)("p",null,"K3s will generate config.toml for containerd in ",(0,r.kt)("inlineCode",{parentName:"p"},"/var/lib/rancher/k3s/agent/etc/containerd/config.toml"),"."),(0,r.kt)("p",null,"For advanced customization for this file you can create another file called ",(0,r.kt)("inlineCode",{parentName:"p"},"config.toml.tmpl")," in the same directory, and it will be used instead."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"config.toml.tmpl")," will be treated as a Go template file, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"config.Node")," structure is being passed to the template. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/k3s-io/k3s/blob/master/pkg/agent/templates"},"this folder")," for Linux and Windows examples on how to use the structure to customize the configuration file.\nThe config.Node golang struct is defined ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/k3s-io/k3s/blob/master/pkg/daemons/config/types.go#L37"},"here")),(0,r.kt)("h2",{id:"nvidia-container-runtime-support"},"NVIDIA Container Runtime Support"),(0,r.kt)("p",null,"K3s will automatically detect and configure the NVIDIA container runtime if it is present when K3s starts."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Install the nvidia-container package repository on the node by following the instructions at:\n",(0,r.kt)("a",{parentName:"li",href:"https://nvidia.github.io/libnvidia-container/"},"https://nvidia.github.io/libnvidia-container/")),(0,r.kt)("li",{parentName:"ol"},"Install the nvidia container runtime packages. For example:\n",(0,r.kt)("inlineCode",{parentName:"li"},"apt install -y nvidia-container-runtime cuda-drivers-fabricmanager-515 nvidia-headless-515-server")),(0,r.kt)("li",{parentName:"ol"},"Install K3s, or restart it if already installed:\n",(0,r.kt)("inlineCode",{parentName:"li"},"curl -ksL get.k3s.io | sh -")),(0,r.kt)("li",{parentName:"ol"},"Confirm that the nvidia container runtime has been found by k3s:\n",(0,r.kt)("inlineCode",{parentName:"li"},"grep nvidia /var/lib/rancher/k3s/agent/etc/containerd/config.toml"))),(0,r.kt)("p",null,"This will automatically add ",(0,r.kt)("inlineCode",{parentName:"p"},"nvidia")," and/or ",(0,r.kt)("inlineCode",{parentName:"p"},"nvidia-experimental")," runtimes to the containerd configuration, depending on what runtime executables are found.\nYou must still add a RuntimeClass definition to your cluster, and deploy Pods that explicitly request the appropriate runtime by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"runtimeClassName: nvidia")," in the Pod spec:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: node.k8s.io/v1\nkind: RuntimeClass\nmetadata:\n  name: nvidia\nhandler: nvidia\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nbody-gpu-benchmark\n  namespace: default\nspec:\n  restartPolicy: OnFailure\n  runtimeClassName: nvidia\n  containers:\n  - name: cuda-container\n    image: nvcr.io/nvidia/k8s/cuda-sample:nbody\n    args: ["nbody", "-gpu", "-benchmark"]\n    resources:\n      limits:\n        nvidia.com/gpu: 1\n    env:\n    - name: NVIDIA_VISIBLE_DEVICES\n      value: all\n    - name: NVIDIA_DRIVER_CAPABILITIES\n      value: all\n')),(0,r.kt)("p",null,"Note that the NVIDIA Container Runtime is also frequently used with the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NVIDIA/k8s-device-plugin/"},"NVIDIA Device Plugin")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NVIDIA/gpu-feature-discovery/"},"GPU Feature Discovery"),", which must be installed separately, with modifications to ensure that pod specs include ",(0,r.kt)("inlineCode",{parentName:"p"},"runtimeClassName: nvidia"),", as mentioned above."),(0,r.kt)("h2",{id:"running-agentless-servers-experimental"},"Running Agentless Servers (Experimental)"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Warning:")," This feature is experimental.")),(0,r.kt)("p",null,"When started with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--disable-agent")," flag, servers do not run the kubelet, container runtime, or CNI. They do not register a Node resource in the cluster, and will not appear in ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl get nodes")," output.\nBecause they do not host a kubelet, they cannot run pods or be managed by operators that rely on enumerating cluster nodes, including the embedded etcd controller and the system upgrade controller."),(0,r.kt)("p",null,"Running agentless servers may be advantageous if you want to obscure your control-plane nodes from discovery by agents and workloads, at the cost of increased administrative overhead caused by lack of cluster operator support."),(0,r.kt)("h2",{id:"running-rootless-servers-experimental"},"Running Rootless Servers (Experimental)"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Warning:")," This feature is experimental.")),(0,r.kt)("p",null,"Rootless mode allows running K3s servers as an unprivileged user, so as to protect the real root on the host from potential container-breakout attacks."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://rootlesscontaine.rs/"},"https://rootlesscontaine.rs/")," to learn more about Rootless Kubernetes."),(0,r.kt)("h3",{id:"known-issues-with-rootless-mode"},"Known Issues with Rootless mode"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Ports")),(0,r.kt)("p",{parentName:"li"},"When running rootless a new network namespace is created.  This means that K3s instance is running with networking fairly detached from the host.\nThe only way to access Services run in K3s from the host is to set up port forwards to the K3s network namespace.\nRootless K3s includes controller that will automatically bind 6443 and service ports below 1024 to the host with an offset of 10000."),(0,r.kt)("p",{parentName:"li"},"For example, a Service on port 80 will become 10080 on the host, but 8080 will become 8080 without any offset. Currently, only LoadBalancer Services are automatically bound.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Cgroups")),(0,r.kt)("p",{parentName:"li"},'Cgroup v1 and Hybrid v1/v2 are not supported; only pure Cgroup v2 is supported. If K3s fails to start due to missing cgroups when running rootless, it is likely that your node is in Hybrid mode, and the "missing" cgroups are still bound to a v1 controller.')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Multi-node/multi-process cluster")),(0,r.kt)("p",{parentName:"li"},"Multi-node rootless clusters, or multiple rootless k3s processes on the same node, are not currently supported. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/k3s-io/k3s/issues/6488#issuecomment-1314998091"},"#6488")," for more details."))),(0,r.kt)("h3",{id:"starting-rootless-servers"},"Starting Rootless Servers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Enable cgroup v2 delegation, see ",(0,r.kt)("a",{parentName:"p",href:"https://rootlesscontaine.rs/getting-started/common/cgroup2/"},"https://rootlesscontaine.rs/getting-started/common/cgroup2/")," .\nThis step is required; the rootless kubelet will fail to start without the proper cgroups delegated.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Download ",(0,r.kt)("inlineCode",{parentName:"p"},"k3s-rootless.service")," from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/k3s-io/k3s/blob/master/k3s-rootless.service"},(0,r.kt)("inlineCode",{parentName:"a"},"https://github.com/k3s-io/k3s/blob/<VERSION>/k3s-rootless.service")),".\nMake sure to use the same version of ",(0,r.kt)("inlineCode",{parentName:"p"},"k3s-rootless.service")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"k3s"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Install ",(0,r.kt)("inlineCode",{parentName:"p"},"k3s-rootless.service")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.config/systemd/user/k3s-rootless.service"),".\nInstalling this file as a system-wide service (",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/systemd/..."),") is not supported.\nDepending on the path of ",(0,r.kt)("inlineCode",{parentName:"p"},"k3s")," binary, you might need to modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecStart=/usr/local/bin/k3s ...")," line of the file.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"systemctl --user daemon-reload"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"systemctl --user enable --now k3s-rootless"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"KUBECONFIG=~/.kube/k3s.yaml kubectl get pods -A"),", and make sure the pods are running."))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," Don't try to run ",(0,r.kt)("inlineCode",{parentName:"p"},"k3s server --rootless")," on a terminal, as terminal sessions do not allow cgroup v2 delegation.\nIf you really need to try it on a terminal, use ",(0,r.kt)("inlineCode",{parentName:"p"},"systemd-run --user -p Delegate=yes --tty k3s server --rooless")," to wrap it in a systemd scope.")),(0,r.kt)("h3",{id:"advanced-rootless-configuration"},"Advanced Rootless Configuration"),(0,r.kt)("p",null,"Rootless K3s uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rootless-containers/rootlesskit"},"rootlesskit")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rootless-containers/slirp4netns"},"slirp4netns")," to communicate between host and user network namespaces.\nSome of the configuration used by rootlesskit and slirp4nets can be set by environment variables. The best way to set these is to add them to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Environment")," field of the k3s-rootless systemd unit."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Variable"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"K3S_ROOTLESS_MTU")),(0,r.kt)("td",{parentName:"tr",align:null},"1500"),(0,r.kt)("td",{parentName:"tr",align:null},"Sets the MTU for the slirp4netns virtual interfaces.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"K3S_ROOTLESS_CIDR")),(0,r.kt)("td",{parentName:"tr",align:null},"10.41.0.0/16"),(0,r.kt)("td",{parentName:"tr",align:null},"Sets the CIDR used by slirp4netns virtual interfaces.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"K3S_ROOTLESS_ENABLE_IPV6")),(0,r.kt)("td",{parentName:"tr",align:null},"autotedected"),(0,r.kt)("td",{parentName:"tr",align:null},"Enables slirp4netns IPv6 support. If not specified, it is automatically enabled if K3s is configured for dual-stack operation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"K3S_ROOTLESS_PORT_DRIVER")),(0,r.kt)("td",{parentName:"tr",align:null},"builtin"),(0,r.kt)("td",{parentName:"tr",align:null},"Selects the rootless port driver; either ",(0,r.kt)("inlineCode",{parentName:"td"},"builtin")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"slirp4netns"),". Builtin is faster, but masquerades the original source address of inbound packets.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"K3S_ROOTLESS_DISABLE_HOST_LOOPBACK")),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Controls whether or not access to the hosts's loopback address via the gateway interface is enabled. It is recommended that this not be changed, for security reasons.")))),(0,r.kt)("h3",{id:"troubleshooting-rootless"},"Troubleshooting Rootless"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Run ",(0,r.kt)("inlineCode",{parentName:"li"},"systemctl --user status k3s-rootless")," to check the daemon status"),(0,r.kt)("li",{parentName:"ul"},"Run ",(0,r.kt)("inlineCode",{parentName:"li"},"journalctl --user -f -u k3s-rootless")," to see the daemon log"),(0,r.kt)("li",{parentName:"ul"},"See also ",(0,r.kt)("a",{parentName:"li",href:"https://rootlesscontaine.rs/"},"https://rootlesscontaine.rs/"))),(0,r.kt)("h2",{id:"node-labels-and-taints"},"Node Labels and Taints"),(0,r.kt)("p",null,"K3s agents can be configured with the options ",(0,r.kt)("inlineCode",{parentName:"p"},"--node-label")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"--node-taint")," which adds a label and taint to the kubelet. The two options only add labels and/or taints ",(0,r.kt)("a",{parentName:"p",href:"/docs-k3s/cli/agent#node-labels-and-taints-for-agents"},"at registration time"),", so they can only be set when the node is first joined to the cluster."),(0,r.kt)("p",null,"All current versions of Kubernetes restrict nodes from registering with most labels with ",(0,r.kt)("inlineCode",{parentName:"p"},"kubernetes.io")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"k8s.io")," prefixes, specifically including the ",(0,r.kt)("inlineCode",{parentName:"p"},"kubernetes.io/role")," label. If you attempt to start a node with a disallowed label, K3s will fail to start. As stated by the Kubernetes authors:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Nodes are not permitted to assert their own role labels. Node roles are typically used to identify privileged or control plane types of nodes, and allowing nodes to label themselves into that pool allows a compromised node to trivially attract workloads (like control plane daemonsets) that confer access to higher privilege credentials.")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/enhancements/blob/master/keps/sig-auth/279-limit-node-access/README.md#proposal"},"SIG-Auth KEP 279")," for more information."),(0,r.kt)("p",null,"If you want to change node labels and taints after node registration, or add reserved labels, you should use ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl"),". Refer to the official Kubernetes documentation for details on how to add ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/"},"taints")," and ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/#add-a-label-to-a-node"},"node labels.")),(0,r.kt)("h2",{id:"starting-the-service-with-the-installation-script"},"Starting the Service with the Installation Script"),(0,r.kt)("p",null,"The installation script will auto-detect if your OS is using systemd or openrc and enable and start the service as part of the installation process."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When running with openrc, logs will be created at ",(0,r.kt)("inlineCode",{parentName:"li"},"/var/log/k3s.log"),". "),(0,r.kt)("li",{parentName:"ul"},"When running with systemd, logs will be created in ",(0,r.kt)("inlineCode",{parentName:"li"},"/var/log/syslog")," and viewed using ",(0,r.kt)("inlineCode",{parentName:"li"},"journalctl -u k3s")," (or ",(0,r.kt)("inlineCode",{parentName:"li"},"journalctl -u k3s-agent")," on agents).")),(0,r.kt)("p",null,"An example of disabling auto-starting and service enablement with the install script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sfL https://get.k3s.io | INSTALL_K3S_SKIP_START=true INSTALL_K3S_SKIP_ENABLE=true sh -\n")),(0,r.kt)("h2",{id:"additional-os-preparations"},"Additional OS Preparations"),(0,r.kt)("h3",{id:"old-iptables-versions"},"Old iptables versions"),(0,r.kt)("p",null,"Several popular Linux distributions ship a version of iptables that contain a bug which causes the accumulation of duplicate rules, which negatively affects the performance and stability of the node. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/k3s-io/k3s/issues/3117"},"Issue #3117")," for information on how to determine if you are affected by this problem."),(0,r.kt)("p",null,"K3s includes a working version of iptables (v1.8.8) which functions properly. You can tell K3s to use its bundled version of iptables by starting K3s with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--prefer-bundled-bin")," option, or by uninstalling the iptables/nftables packages from your operating system."),(0,r.kt)("admonition",{title:"Version Gate",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--prefer-bundled-bin")," flag is available starting with the 2022-12 releases (v1.26.0+k3s1, v1.25.5+k3s1, v1.24.9+k3s1, v1.23.15+k3s1).")),(0,r.kt)("h3",{id:"red-hat-enterprise-linux--centos"},"Red Hat Enterprise Linux / CentOS"),(0,r.kt)("p",null,"It is recommended to turn off firewalld:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl disable firewalld --now\n")),(0,r.kt)("p",null,"If you wish to keep firewalld enabled, by default, the following rules are required:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"firewall-cmd --permanent --add-port=6443/tcp #apiserver\nfirewall-cmd --permanent --zone=trusted --add-source=10.42.0.0/16 #pods\nfirewall-cmd --permanent --zone=trusted --add-source=10.43.0.0/16 #services\nfirewall-cmd --reload\n")),(0,r.kt)("p",null,"Additional ports may need to be opened depending on your setup. See ",(0,r.kt)("a",{parentName:"p",href:"/docs-k3s/installation/requirements#inbound-rules-for-k3s-server-nodes"},"Inbound Rules")," for more information. If you change the default CIDR for pods or services, you will need to update the firewall rules accordingly."),(0,r.kt)("p",null,"If enabled, it is required to disable nm-cloud-setup and reboot the node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl disable nm-cloud-setup.service nm-cloud-setup.timer\nreboot\n")),(0,r.kt)("h3",{id:"ubuntu"},"Ubuntu"),(0,r.kt)("p",null,"It is recommended to turn off ufw (uncomplicated firewall):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ufw disable\n")),(0,r.kt)("p",null,"If you wish to keep ufw enabled, by default, the following rules are required:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ufw allow 6443/tcp #apiserver\nufw allow from 10.42.0.0/16 to any #pods\nufw allow from 10.43.0.0/16 to any #services\n")),(0,r.kt)("p",null,"Additional ports may need to be opened depending on your setup. See ",(0,r.kt)("a",{parentName:"p",href:"/docs-k3s/installation/requirements#inbound-rules-for-k3s-server-nodes"},"Inbound Rules")," for more information. If you change the default CIDR for pods or services, you will need to update the firewall rules accordingly."),(0,r.kt)("h3",{id:"raspberry-pi"},"Raspberry Pi"),(0,r.kt)("p",null,"Raspberry Pi OS is Debian based, and may suffer from an old iptables version. See ",(0,r.kt)("a",{parentName:"p",href:"#old-iptables-versions"},"workarounds"),"."),(0,r.kt)("p",null,"Standard Raspberry Pi OS installations do not start with ",(0,r.kt)("inlineCode",{parentName:"p"},"cgroups")," enabled. ",(0,r.kt)("strong",{parentName:"p"},"K3S")," needs ",(0,r.kt)("inlineCode",{parentName:"p"},"cgroups")," to start the systemd service. ",(0,r.kt)("inlineCode",{parentName:"p"},"cgroups"),"can be enabled by appending ",(0,r.kt)("inlineCode",{parentName:"p"},"cgroup_memory=1 cgroup_enable=memory")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"/boot/cmdline.txt"),"."),(0,r.kt)("p",null,"Example cmdline.txt:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"console=serial0,115200 console=tty1 root=PARTUUID=58b06195-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait cgroup_memory=1 cgroup_enable=memory\n")),(0,r.kt)("p",null,"Starting with Ubuntu 21.10, vxlan support on Raspberry Pi has been moved into a separate kernel module. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install linux-modules-extra-raspi\n")),(0,r.kt)("h2",{id:"running-k3s-in-docker"},"Running K3s in Docker"),(0,r.kt)("p",null,"There are several ways to run K3s in Docker:"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"K3d",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/k3d-io/k3d"},"k3d")," is a utility designed to easily run multi-node K3s clusters in Docker."),(0,r.kt)("p",null,"k3d makes it very easy to create single- and multi-node k3s clusters in docker, e.g. for local development on Kubernetes."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"https://k3d.io/#installation"},"Installation")," documentation for more information on how to install and use k3d.")),(0,r.kt)(o.Z,{value:"Docker",mdxType:"TabItem"},(0,r.kt)("p",null,"To use Docker, ",(0,r.kt)("inlineCode",{parentName:"p"},"rancher/k3s")," images are also available to run the K3s server and agent.\nUsing the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker run")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker run \\\n  --privileged \\\n  --name k3s-server-1 \\\n  --hostname k3s-server-1 \\\n  -p 6443:6443 \\\n  -d rancher/k3s:v1.24.10-k3s1 \\\n  server\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You must specify a valid K3s version as the tag; the ",(0,r.kt)("inlineCode",{parentName:"p"},"latest")," tag is not maintained.",(0,r.kt)("br",{parentName:"p"}),"\n","Docker images do not allow a ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," sign in tags, use a ",(0,r.kt)("inlineCode",{parentName:"p"},"-")," in the tag instead.")),(0,r.kt)("p",null,"Once K3s is up and running, you can copy the admin kubeconfig out of the Docker container for use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker cp k3s-server-1:/etc/rancher/k3s/k3s.yaml ~/.kube/config\n")))),(0,r.kt)("h2",{id:"selinux-support"},"SELinux Support"),(0,r.kt)("admonition",{title:"Version Gate",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Available as of v1.19.4+k3s1")),(0,r.kt)("p",null,"If you are installing K3s on a system where SELinux is enabled by default (such as CentOS), you must ensure the proper SELinux policies have been installed. "),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"Automatic Installation",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs-k3s/installation/configuration#configuration-with-install-script"},"install script")," will automatically install the SELinux RPM from the Rancher RPM repository if on a compatible system if not performing an air-gapped install. Automatic installation can be skipped by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"INSTALL_K3S_SKIP_SELINUX_RPM=true"),".")),(0,r.kt)(o.Z,{value:"Manual Installation",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"The necessary policies can be installed with the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yum install -y container-selinux selinux-policy-base\nyum install -y https://rpm.rancher.io/k3s/latest/common/centos/7/noarch/k3s-selinux-0.2-1.el7_8.noarch.rpm\n")),(0,r.kt)("p",null,"To force the install script to log a warning rather than fail, you can set the following environment variable: ",(0,r.kt)("inlineCode",{parentName:"p"},"INSTALL_K3S_SELINUX_WARN=true"),"."))),(0,r.kt)("h3",{id:"enabling-selinux-enforcement"},"Enabling SELinux Enforcement"),(0,r.kt)("p",null,"To leverage SELinux, specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"--selinux")," flag when starting K3s servers and agents."),(0,r.kt)("p",null,"This option can also be specified in the K3s ",(0,r.kt)("a",{parentName:"p",href:"#"},"configuration file"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"selinux: true\n")),(0,r.kt)("p",null,"Using a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"--data-dir")," under SELinux is not supported. To customize it, you would most likely need to write your own custom policy. For guidance, you could refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/containers/container-selinux"},"containers/container-selinux")," repository, which contains the SELinux policy files for Container Runtimes, and the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rancher/k3s-selinux"},"rancher/k3s-selinux")," repository, which contains the SELinux policy for K3s."),(0,r.kt)("h2",{id:"enabling-lazy-pulling-of-estargz-experimental"},"Enabling Lazy Pulling of eStargz (Experimental)"),(0,r.kt)("h3",{id:"whats-lazy-pulling-and-estargz"},"What's lazy pulling and eStargz?"),(0,r.kt)("p",null,"Pulling images is known as one of the time-consuming steps in the container lifecycle.\nAccording to ",(0,r.kt)("a",{parentName:"p",href:"https://www.usenix.org/conference/fast16/technical-sessions/presentation/harter"},"Harter, et al."),","),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"pulling packages accounts for 76% of container start time, but only 6.4% of that data is read")),(0,r.kt)("p",null,"To address this issue, k3s experimentally supports ",(0,r.kt)("em",{parentName:"p"},"lazy pulling")," of image contents.\nThis allows k3s to start a container before the entire image has been pulled.\nInstead, the necessary chunks of contents (e.g. individual files) are fetched on-demand.\nEspecially for large images, this technique can shorten the container startup latency."),(0,r.kt)("p",null,"To enable lazy pulling, the target image needs to be formatted as ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/containerd/stargz-snapshotter/blob/main/docs/stargz-estargz.md"},(0,r.kt)("em",{parentName:"a"},"eStargz")),".\nThis is an OCI-alternative but 100% OCI-compatible image format for lazy pulling.\nBecause of the compatibility, eStargz can be pushed to standard container registries (e.g. ghcr.io) as well as this is ",(0,r.kt)("em",{parentName:"p"},"still runnable")," even on eStargz-agnostic runtimes."),(0,r.kt)("p",null,"eStargz is developed based on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/google/crfs"},"stargz format proposed by Google CRFS project")," but comes with practical features including content verification and performance optimization.\nFor more details about lazy pulling and eStargz, please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/containerd/stargz-snapshotter"},"Stargz Snapshotter project repository"),"."),(0,r.kt)("h3",{id:"configure-k3s-for-lazy-pulling-of-estargz"},"Configure k3s for lazy pulling of eStargz"),(0,r.kt)("p",null,"As shown in the following, ",(0,r.kt)("inlineCode",{parentName:"p"},"--snapshotter=stargz")," option is needed for k3s server and agent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"k3s server --snapshotter=stargz\n")),(0,r.kt)("p",null,"With this configuration, you can perform lazy pulling for eStargz-formatted images.\nThe following example Pod manifest uses eStargz-formatted ",(0,r.kt)("inlineCode",{parentName:"p"},"node:13.13.0")," image (",(0,r.kt)("inlineCode",{parentName:"p"},"ghcr.io/stargz-containers/node:13.13.0-esgz"),").\nWhen the stargz snapshotter is enabled, K3s performs lazy pulling for this image."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nodejs\nspec:\n  containers:\n  - name: nodejs-estargz\n    image: ghcr.io/stargz-containers/node:13.13.0-esgz\n    command: [\"node\"]\n    args:\n    - -e\n    - var http = require('http');\n      http.createServer(function(req, res) {\n        res.writeHead(200);\n        res.end('Hello World!\\n');\n      }).listen(80);\n    ports:\n    - containerPort: 80\n")),(0,r.kt)("h2",{id:"additional-logging-sources"},"Additional Logging Sources"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://rancher.com/docs/rancher/v2.6/en/logging/helm-chart-options/"},"Rancher logging")," for K3s can be installed without using Rancher. The following instructions should be executed to do so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add rancher-charts https://charts.rancher.io\nhelm repo update\nhelm install --create-namespace -n cattle-logging-system rancher-logging-crd rancher-charts/rancher-logging-crd\nhelm install --create-namespace -n cattle-logging-system rancher-logging --set additionalLoggingSources.k3s.enabled=true rancher-charts/rancher-logging\n")),(0,r.kt)("h2",{id:"additional-network-policy-logging"},"Additional Network Policy Logging"),(0,r.kt)("p",null,"Packets dropped by network policies can be logged. The packet is sent to the iptables NFLOG action, which shows the packet details, including the network policy that blocked it."),(0,r.kt)("p",null,"If there is a lot of traffic, the number of log messages could be very high. To control the log rate on a per-policy basis, set the ",(0,r.kt)("inlineCode",{parentName:"p"},"limit")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"limit-burst")," iptables parameters by adding the following annotations to the network policy in question:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kube-router.io/netpol-nflog-limit=<LIMIT-VALUE>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kube-router.io/netpol-nflog-limit-burst=<LIMIT-BURST-VALUE>"))),(0,r.kt)("p",null,"Default values are ",(0,r.kt)("inlineCode",{parentName:"p"},"limit=10/minute")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"limit-burst=10"),". Check the ",(0,r.kt)("a",{parentName:"p",href:"https://www.netfilter.org/documentation/HOWTO/packet-filtering-HOWTO-7.html#:~:text=restrict%20the%20rate%20of%20matches"},"iptables manual")," for more information on the format and possible values for these fields."),(0,r.kt)("p",null,"To convert NFLOG packets to log entries, install ulogd2 and configure ",(0,r.kt)("inlineCode",{parentName:"p"},"[log1]")," to read on ",(0,r.kt)("inlineCode",{parentName:"p"},"group=100"),". Then, restart the ulogd2 service for the new config to be committed.\nWhen a packet is blocked by network policy rules, a log message will appear in ",(0,r.kt)("inlineCode",{parentName:"p"},"/var/log/ulog/syslogemu.log"),"."),(0,r.kt)("p",null,"Packets sent to the NFLOG netlink socket can also be read by using command-line tools like tcpdump or tshark:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tcpdump -ni nflog:100\n")),(0,r.kt)("p",null,"While more readily available, tcpdump will not show the name of the network policy that blocked the packet. Use wireshark's tshark command instead to display the full NFLOG packet header, including the ",(0,r.kt)("inlineCode",{parentName:"p"},"nflog.prefix")," field that contains the policy name."))}m.isMDXComponent=!0}}]);